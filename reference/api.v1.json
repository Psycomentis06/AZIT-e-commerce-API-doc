{
  "openapi": "3.0.0",
  "info": {
    "title": "API",
    "version": "1.0",
    "description": ""
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1",
      "description": ""
    }
  ],
  "paths": {
    "/user/{userId}": {
      "parameters": [
        {
          "schema": {
            "type": "number"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Id of an existing user."
        }
      ],
      "get": {
        "summary": "Get User Info by User ID",
        "tags": [],
        "responses": {
          "200": {
            "description": "User Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "User Not Found"
          }
        },
        "operationId": "get-users-userId",
        "description": "Retrieve the information of the user with the matching user ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        }
      },
      "patch": {
        "summary": "Update User Information",
        "operationId": "patch-users-userId",
        "responses": {
          "200": {
            "description": "User Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "Updated User Rebecca Baker": {
                    "value": {
                      "id": 13,
                      "firstName": "Rebecca",
                      "lastName": "Baker",
                      "email": "rebecca@gmail.com",
                      "dateOfBirth": "1985-10-02",
                      "emailVerified": false,
                      "createDate": "2019-08-24"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User Not Found"
          },
          "409": {
            "description": "Email Already Taken"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update the infromation of an existing user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "example": {
                  "value": {
                    "firstName": "string",
                    "lastName": "string",
                    "email": "user@example.com",
                    "password": "pa$$word"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "",
        "operationId": "delete-users-userId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete user"
      }
    },
    "/user": {
      "post": {
        "summary": "Create New User",
        "operationId": "post-user",
        "responses": {
          "200": {
            "description": "User Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Missing Required Information"
          },
          "409": {
            "description": "Email Already Taken"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "firstName": "string",
                    "lastName": "string",
                    "email": "user@example.com",
                    "password": "pa$$word",
                    "phoneNumber": "string"
                  }
                }
              }
            }
          },
          "description": "Post the necessary fields for the API to create a new user."
        },
        "description": "Create a new user."
      },
      "get": {
        "summary": "Get All users",
        "operationId": "get-user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "description": "Retrieve all users in database",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "username",
            "description": "user is firstName (and / or ) lastName"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "limit",
            "description": "Max number of users"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "offest",
            "description": "Number of 1st user"
          }
        ]
      },
      "parameters": []
    },
    "/product": {
      "get": {
        "summary": "Get all products",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "products": [
                        {
                          "id": 0,
                          "name": "string",
                          "description": "string",
                          "price": 0,
                          "discount": 0,
                          "quantity": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-products",
        "description": "Get all products",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Product name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "category",
            "description": "Product category"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "limit",
            "description": "Max products to retrieve from database"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "offset",
            "description": "First product position"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "group",
            "description": "Category Group like PC, Clothes, ...."
          }
        ]
      },
      "post": {
        "summary": "Create Product",
        "operationId": "post-products",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": 0,
                      "name": "string",
                      "description": "string",
                      "price": 0,
                      "discount": 0,
                      "quantity": 0
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create new product",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "description": "string",
                    "price": 0,
                    "discount": 0,
                    "quantity": 0
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/product/{productId}": {
      "get": {
        "summary": "Get product by id",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-products",
        "description": "Get product with matching ID"
      },
      "parameters": [
        {
          "schema": {
            "type": "number"
          },
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "Id of an existing product"
        }
      ],
      "patch": {
        "summary": "Update product by ID",
        "operationId": "patch-products-productId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        },
        "description": "Update product with matching ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete product by ID",
        "operationId": "delete-products-productId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete product"
      }
    },
    "/user/authenticate": {
      "parameters": [],
      "post": {
        "summary": "Authenticate User",
        "operationId": "post-user-authenticate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Authenticate existing user with given E-mail and password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "required": [
                  "password",
                  "email"
                ]
              }
            }
          }
        }
      }
    },
    "/order": {
      "post": {
        "summary": "Create new order",
        "operationId": "post-order",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create Order",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users_id": {
                    "type": "number"
                  },
                  "product_id": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "get": {
        "summary": "Get user orders",
        "operationId": "get-order",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "products": [
                        {
                          "product_id": {
                            "id": 0,
                            "name": "string",
                            "description": "string",
                            "price": 0,
                            "discount": 0,
                            "quantity": 0
                          },
                          "date": "2019-08-24"
                        },
                        {
                          "product_id": {
                            "id": 1,
                            "name": "string",
                            "description": "string",
                            "price": 0,
                            "discount": 0,
                            "quantity": 0
                          },
                          "date": "2021-08-24"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Get orders with matching user ID",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "user_id",
            "required": true,
            "description": "User ID"
          },
          {
            "schema": {
              "type": "integer",
              "default": "50"
            },
            "in": "query",
            "name": "limit",
            "description": "Max items to retrieve"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset",
            "description": "Get items start with item N°[offset]"
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "year",
            "description": "Get orders on specific year"
          }
        ]
      }
    },
    "/order/{orderId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Remove order with users' ID",
        "operationId": "delete-order-orderId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Remove order with matching userID"
      }
    },
    "/upload/{uploadId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uploadId",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update upload by ID",
        "operationId": "patch-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update upload info with given ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Upload"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "id": 0,
                    "name": "string",
                    "url": "http://example.com",
                    "type": 0,
                    "product_id": 0
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Upload by ID",
        "operationId": "delete-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Remove upload with given ID"
      },
      "get": {
        "summary": "Get upload by ID",
        "operationId": "get-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Upload"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Get upload (image, video, PDF) with given ID"
      }
    },
    "/user/{userId}/password": {
      "parameters": [
        {
          "schema": {
            "type": "number"
          },
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "User ID"
        }
      ],
      "patch": {
        "summary": "Reset User password",
        "operationId": "patch-user-userId-password-reset",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Reset user password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  },
                  "confirmation": {
                    "type": "string",
                    "description": "Retyped Password"
                  }
                },
                "required": [
                  "currentPassword",
                  "newPassword",
                  "confirmation"
                ]
              }
            }
          }
        }
      }
    },
    "/user/{userId}/password/forgot": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Send user email verification key to change password",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-user-userId-password-forget",
        "description": "Send user email verification key to change password "
      },
      "post": {
        "summary": "Login user with verification key",
        "operationId": "post-user-userId-password-forgot",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Login user with verification key  sent to his mail.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "verificationKey": {
                    "type": "string",
                    "description": "Code (6 digits) sent to user's mail",
                    "minLength": 111111,
                    "maxLength": 999999
                  }
                },
                "required": [
                  "verificationKey"
                ]
              }
            }
          },
          "description": ""
        }
      },
      "patch": {
        "summary": "Rest forgot user password",
        "operationId": "patch-user-userId-password-forgot",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Rest user's password after verification success",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPassword": {
                    "type": "string"
                  },
                  "confirmation": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/review": {
      "get": {
        "summary": "Get Reviews",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-review",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "description": "User ID"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "description": "Product ID"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "offset"
          }
        ],
        "description": "Get Reviews for specific user with userID or product with productId",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        }
      },
      "post": {
        "summary": "Create Review",
        "operationId": "post-review",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create Review",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              },
              "examples": {
                "Example-1": {
                  "value": {
                    "user_id": 0,
                    "product_id": 0,
                    "description": "string"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Review",
        "operationId": "patch-review",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update review description",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "required": true
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete Review",
        "operationId": "delete-review",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete review",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId"
          }
        ]
      }
    },
    "/user/{userId}/wishlist": {
      "get": {
        "summary": "Get user's Wishlist",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "examples": {
                  "Example-1": {
                    "value": [
                      {
                        "id": 0,
                        "name": "string",
                        "description": "string",
                        "price": 0,
                        "discount": 0,
                        "quantity": 0,
                        "category_id": {
                          "id": "string",
                          "name": "other"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-wishlist",
        "description": "Get user is Wishlist",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "offset"
          }
        ]
      },
      "post": {
        "summary": "Create user Wishlist",
        "operationId": "post-wishlist",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Create user wishlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete user's Wishlist",
        "operationId": "delete-wishlist",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Remove product from user's wishlist or the entire wishlist if productId is not present in the queryParams",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "required": true,
            "description": "User ID"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "description": "Product ID"
          }
        ]
      },
      "parameters": [],
      "patch": {
        "summary": "Update user is Wishlist",
        "operationId": "patch-user-userId-wishlist",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update user is Wishlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        }
      }
    },
    "/rate": {
      "get": {
        "summary": "Get user Rate | Product Rate",
        "tags": [],
        "responses": {},
        "operationId": "get-rate",
        "description": "Get user rate value for specific product or get Product global rating if userId is not present in queryPrams",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId"
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "New rate",
        "operationId": "post-rate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "required": true
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 5
                  }
                },
                "required": [
                  "rate"
                ]
              }
            }
          }
        },
        "description": "Create new user rate for a product"
      },
      "patch": {
        "summary": "Update rate value",
        "operationId": "patch-rate",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rate"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update user rate value",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "required": true
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete user rate",
        "operationId": "delete-rate",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete user rate",
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "userId",
            "required": true
          },
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "productId",
            "required": true
          }
        ]
      },
      "parameters": []
    },
    "/paypal/make/payment": {
      "parameters": [],
      "post": {
        "summary": "Create PayPal payment method",
        "operationId": "post-paypal-make-payment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create PayPal payment method",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sum",
            "description": "Amount of money"
          }
        ]
      }
    },
    "/paypal/complete/payment": {
      "post": {
        "summary": "Create PayPal payment completion",
        "operationId": "post-paypal-complete-payment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "PayPal Payment Object"
                }
              }
            }
          }
        },
        "description": "Create PayPal payment completion",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "paymentId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "payerId"
          }
        ]
      }
    },
    "/user/{userId}/address": {
      "get": {
        "summary": "Get user Address",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": 0,
                      "address": "string",
                      "city_id": {
                        "id": 0,
                        "name": "string",
                        "country_id": {
                          "id": 0,
                          "name": "string"
                        }
                      },
                      "user_id": {
                        "id": 0,
                        "firstName": "string",
                        "lastName": "string",
                        "email": "user@example.com",
                        "password": "pa$$word",
                        "phoneNumber": "string",
                        "roles": "ROLE_USER",
                        "address": "string",
                        "activationKey": true,
                        "passwordVkey": 0
                      },
                      "credit_card_id": {
                        "cardNumber": "string",
                        "expire_date": "2019-08-24",
                        "cc_type_id": {
                          "id": 0,
                          "type": "string"
                        },
                        "user_id": {
                          "id": 0,
                          "firstName": "string",
                          "lastName": "string",
                          "email": "user@example.com",
                          "password": "pa$$word",
                          "phoneNumber": "string",
                          "roles": "ROLE_USER",
                          "address": "string",
                          "activationKey": true,
                          "passwordVkey": 0
                        },
                        "address_id": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-user-address",
        "description": "Get user address by id"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Create user address",
        "operationId": "post-user-userId-address",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "description": "Create user address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "id": 0,
                    "address": "string",
                    "city_id": {
                      "id": 0,
                      "name": "string",
                      "country_id": {
                        "id": 0,
                        "name": "string"
                      }
                    },
                    "user_id": {
                      "id": 0,
                      "firstName": "string",
                      "lastName": "string",
                      "email": "user@example.com",
                      "password": "pa$$word",
                      "phoneNumber": "string",
                      "roles": "ROLE_USER",
                      "address": "string",
                      "activationKey": true,
                      "passwordVkey": 0
                    },
                    "credit_card_id": {
                      "cardNumber": "string",
                      "expire_date": "2019-08-24",
                      "cc_type_id": {
                        "id": 0,
                        "type": "string"
                      },
                      "user_id": {
                        "id": 0,
                        "firstName": "string",
                        "lastName": "string",
                        "email": "user@example.com",
                        "password": "pa$$word",
                        "phoneNumber": "string",
                        "roles": "ROLE_USER",
                        "address": "string",
                        "activationKey": true,
                        "passwordVkey": 0
                      },
                      "address_id": {}
                    }
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "patch": {
        "summary": "Update user address",
        "operationId": "patch-user-userId-address",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update user address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user address",
        "operationId": "delete-user-userId-address",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete user address"
      }
    },
    "/user/{userId}/creditcard": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get user credit card",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCard"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cardNumber": "string",
                      "expire_date": "2019-08-24",
                      "cc_type_id": {
                        "id": 0,
                        "type": "string"
                      },
                      "user_id": {
                        "id": 0,
                        "firstName": "string",
                        "lastName": "string",
                        "email": "user@example.com",
                        "password": "pa$$word",
                        "phoneNumber": "string",
                        "roles": "ROLE_USER",
                        "address": "string",
                        "activationKey": true,
                        "passwordVkey": 0
                      },
                      "address_id": {
                        "id": 0,
                        "address": "string",
                        "city_id": {
                          "id": 0,
                          "name": "string",
                          "country_id": {
                            "id": 0,
                            "name": "string"
                          }
                        },
                        "user_id": {
                          "id": 0,
                          "firstName": "string",
                          "lastName": "string",
                          "email": "user@example.com",
                          "password": "pa$$word",
                          "phoneNumber": "string",
                          "roles": "ROLE_USER",
                          "address": "string",
                          "activationKey": true,
                          "passwordVkey": 0
                        },
                        "credit_card_id": {}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-user-userId-creditcard",
        "description": "Get user credit card"
      },
      "post": {
        "summary": "Create new user credit card",
        "operationId": "post-user-userId-creditcard",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create new user credit card"
      },
      "patch": {
        "summary": "Update user Credit card",
        "operationId": "patch-user-userId-creditcard",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCard"
                }
              }
            }
          }
        },
        "description": "Update user Credit card",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCard"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete credit card",
        "operationId": "delete-user-userId-creditcard",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/product/{productId}/item": {
      "get": {
        "summary": "Get product items",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductItem"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "id": "string",
                        "name": "string",
                        "description": "string",
                        "price": 0,
                        "discount": 0,
                        "stock": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-product-item",
        "description": "Get product items",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ]
      },
      "parameters": [],
      "post": {
        "summary": "Create product item",
        "operationId": "post-product-productId-item",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductItem"
                }
              }
            }
          }
        },
        "description": "Create product item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductItem"
              }
            }
          }
        }
      }
    },
    "/product/{productId}/item/{itemId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "itemId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Product item",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-product-productId-item-itemId",
        "description": "Get Product item"
      },
      "patch": {
        "summary": "Update product item",
        "operationId": "patch-product-productId-item-itemId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Update product item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductItem"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Product item",
        "operationId": "delete-product-productId-item-itemId",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "description": "Delete Product item"
      }
    },
    "/product/{productId}/upload": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get product uploads",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Upload"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "operationId": "get-product-productId-upload",
        "description": "Get product uploads",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type",
            "description": "Type of uploads (image, video, document)"
          }
        ]
      },
      "post": {
        "summary": "Create product upload",
        "operationId": "post-product-productId-upload",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create product upload"
      }
    },
    "/product/{productId}/item/{itemId}/upload": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "itemId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get product items uploads",
        "tags": [],
        "operationId": "get-product-productId-item-itemId-upload",
        "description": "Get product items uploads",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type"
          }
        ]
      },
      "post": {
        "summary": "Create product item upload",
        "operationId": "post-product-productId-item-itemId-upload",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create product item upload"
      }
    },
    "/product/{productId}/upload/{uploadId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "uploadId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get product upload",
        "tags": [],
        "responses": {},
        "operationId": "get-product-productId-upload-uploadId",
        "description": "Get product upload"
      },
      "patch": {
        "summary": "Update product upload",
        "operationId": "patch-product-productId-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update product upload"
      },
      "delete": {
        "summary": "Delete product upload",
        "operationId": "delete-product-productId-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete product upload"
      }
    },
    "/product/{productId}/item/{itemId}/upload/{uploadId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "itemId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "uploadId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get product item is upload",
        "tags": [],
        "responses": {},
        "operationId": "get-product-productId-item-itemId-upload-uploadId",
        "description": "Get product item is upload"
      },
      "patch": {
        "summary": "Update product item upload",
        "operationId": "patch-product-productId-item-itemId-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update product item upload"
      },
      "delete": {
        "summary": "Delete product upload item",
        "operationId": "delete-product-productId-item-itemId-upload-uploadId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete product upload item"
      }
    },
    "/order/{orderId}/transaction": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get order transaction info",
        "tags": [],
        "responses": {},
        "operationId": "get-order-orderId-transaction",
        "description": "Get order transaction info"
      },
      "patch": {
        "summary": "Update transaction",
        "operationId": "patch-order-orderId-transaction",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update transaction"
      }
    },
    "/order/{orderId}/transaction/invoice": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get transaction invoice json or PDF",
        "tags": [],
        "responses": {},
        "operationId": "get-order-orderId-transaction-invoice",
        "description": "Get transaction invoice json or PDF",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "json"
            },
            "in": "query",
            "name": "output",
            "description": "response content type can be \"pdf\" or \"json\""
          }
        ]
      }
    },
    "/order/{orderId}/estimatedate": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orderId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Estimate order delivery date by given location",
        "tags": [],
        "responses": {},
        "operationId": "get-order-orderId-estimatedate",
        "description": "Estimate order delivery date by given location",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "country",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "city"
          }
        ]
      }
    },
    "/country": {
      "get": {
        "summary": "Get countries",
        "tags": [],
        "responses": {},
        "operationId": "get-country",
        "description": "Get countries"
      },
      "post": {
        "summary": "Create country",
        "operationId": "post-country",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create country"
      }
    },
    "/country/{countryId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "countryId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get country by ID",
        "tags": [],
        "responses": {},
        "operationId": "get-country-countryId",
        "description": "Get country by ID"
      },
      "patch": {
        "summary": "Update country",
        "operationId": "patch-country-countryId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update country"
      },
      "delete": {
        "summary": "Delete Country",
        "operationId": "delete-country-countryId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete Country"
      }
    },
    "/country/{countryId}/city": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "countryId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get country cities",
        "tags": [],
        "responses": {},
        "operationId": "get-country-countryId-city",
        "description": "Get country cities"
      },
      "post": {
        "summary": "Create city for given country",
        "operationId": "post-country-countryId-city",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create city for given country"
      }
    },
    "/country/{countryId}/city/{cityId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "countryId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "cityId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get country's city",
        "tags": [],
        "responses": {},
        "operationId": "get-country-countryId-city-cityId",
        "description": "Get country's city"
      },
      "patch": {
        "summary": "Update country's city",
        "operationId": "patch-country-countryId-city-cityId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update country's city"
      },
      "delete": {
        "summary": "Delete country's city",
        "operationId": "delete-country-countryId-city-cityId",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete country's city"
      }
    },
    "/category": {
      "get": {
        "summary": "Get all categories",
        "tags": [],
        "responses": {},
        "operationId": "get-category",
        "description": "Get all categories",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "parent"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "offset"
          }
        ]
      },
      "post": {
        "summary": "Create category",
        "operationId": "post-category",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create category"
      }
    },
    "/category/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get category and its child's",
        "tags": [],
        "responses": {},
        "operationId": "get-category-id",
        "description": ""
      },
      "patch": {
        "summary": "Update Category",
        "operationId": "patch-category-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Update Category"
      },
      "delete": {
        "summary": "Delete Category",
        "operationId": "delete-category-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete Category"
      }
    },
    "/product/{productId}/item/{itemId}/stock/check": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "productId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "itemId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Check Product item stock availability",
        "tags": [],
        "responses": {},
        "operationId": "get-product-productId-item-itemId-stock-check",
        "description": "Check Product item stock availability",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "quantity",
            "description": "How many items to order"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "description": "",
        "x-examples": {
          "Alice Smith": {
            "id": 142,
            "firstName": "Alice",
            "lastName": "Smith",
            "email": "alice.smith@gmail.com",
            "dateOfBirth": "1997-10-31",
            "emailVerified": true,
            "signUpDate": "2019-08-24"
          }
        },
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the given user."
          },
          "firstName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 16
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 16,
            "format": "password"
          },
          "phoneNumber": {
            "type": "string"
          },
          "roles": {
            "type": "string",
            "default": "ROLE_USER",
            "readOnly": true
          },
          "address": {
            "type": "string"
          },
          "activationKey": {
            "type": "boolean"
          },
          "passwordVkey": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "password",
          "roles"
        ]
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "stock": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "price",
          "stock"
        ]
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "order_details_id": {
            "$ref": "#/components/schemas/Product"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "product_quantity": {
            "type": "integer"
          },
          "amount": {
            "type": "number"
          },
          "transaction_id": {
            "type": "number"
          }
        },
        "required": [
          "user_id",
          "order_details_id",
          "date"
        ]
      },
      "Country": {
        "title": "Country",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "description": ""
      },
      "City": {
        "title": "City",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "country_id": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "address": {
            "type": "string"
          },
          "city_id": {
            "$ref": "#/components/schemas/City"
          },
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "credit_card_id": {
            "$ref": "#/components/schemas/CreditCard"
          }
        }
      },
      "Upload": {
        "title": "Upload",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "format": "uri"
          },
          "type": {
            "type": "integer"
          },
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "id",
          "name",
          "url",
          "type"
        ]
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "tag": {
            "type": "string"
          },
          "product_id": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "required": [
          "id",
          "tag"
        ]
      },
      "Category": {
        "title": "Category",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "default": "other"
          },
          "parent_id": {
            "$ref": "#/components/schemas/Category"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ProductTag": {
        "title": "ProductTag",
        "type": "object",
        "properties": {
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "tag_id": {
            "$ref": "#/components/schemas/Tag"
          }
        }
      },
      "Review": {
        "title": "Review",
        "type": "object",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "description": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "WishList": {
        "title": "WishList",
        "type": "object",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "product_id": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "Rate": {
        "title": "Rate",
        "type": "object",
        "properties": {
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "stars": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          }
        },
        "required": [
          "stars"
        ]
      },
      "ProductCategories": {
        "title": "ProductCategories",
        "type": "object",
        "properties": {
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "category_id": {
            "$ref": "#/components/schemas/Category"
          }
        }
      },
      "CreditCard": {
        "title": "CreditCard",
        "type": "object",
        "properties": {
          "cardNumber": {
            "type": "string"
          },
          "expire_date": {
            "type": "string",
            "format": "date"
          },
          "cc_type_id": {
            "$ref": "#/components/schemas/CreditCardType"
          },
          "user_id": {
            "$ref": "#/components/schemas/User"
          },
          "address_id": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "CreditCardType": {
        "title": "CreditCardType",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ProductUpload": {
        "title": "ProductUpload",
        "type": "object",
        "properties": {
          "product_id": {
            "$ref": "#/components/schemas/Product"
          },
          "upload_id": {
            "$ref": "#/components/schemas/Upload"
          }
        }
      },
      "OrderDetails": {
        "title": "OrderDetails",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "order_id": {
            "$ref": "#/components/schemas/Order"
          },
          "product_item_id": {
            "$ref": "#/components/schemas/ProductItem"
          },
          "product_quantity": {
            "type": "integer"
          },
          "price": {
            "type": "number"
          }
        }
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "order_id": {
            "$ref": "#/components/schemas/Order"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "Invoice": {
        "title": "Invoice",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/Transaction"
          },
          "date": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ProductItem": {
        "title": "ProductItem",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "stock": {
            "type": "integer"
          }
        }
      },
      "ProductItemUpload": {
        "title": "ProductItemUpload",
        "type": "object",
        "properties": {
          "product_item_id": {
            "$ref": "#/components/schemas/ProductItem"
          },
          "upload_id": {
            "$ref": "#/components/schemas/Upload"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "name": "Bearer [JWT key]",
        "type": "apiKey",
        "in": "header"
      }
    },
    "parameters": {},
    "examples": {}
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}